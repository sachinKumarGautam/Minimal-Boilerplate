'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.themeable = themeable;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @typedef {Object.<string, TReactCSSThemrTheme>} TReactCSSThemrTheme
 */

/**
 * @typedef {{}} TReactCSSThemrOptions
 * @property {String|Boolean} [composeTheme=COMPOSE_DEEPLY]
 */

var COMPOSE_DEEPLY = 'deeply';
var COMPOSE_SOFTLY = 'softly';
var DONT_COMPOSE = false;

var DEFAULT_OPTIONS = {
  composeTheme: COMPOSE_DEEPLY,
  mapThemrProps: defaultMapThemrProps
};

var THEMR_CONFIG = typeof Symbol !== 'undefined' ? Symbol('THEMR_CONFIG') : '__REACT_CSS_THEMR_CONFIG__';

/**
 * Themr decorator
 * @param {String|Number|Symbol} componentName - Component name
 * @param {TReactCSSThemrTheme} [localTheme] - Base theme
 * @param {{}} [options] - Themr options
 * @returns {function(ThemedComponent:Function):Function} - ThemedComponent
 */

exports.default = function (componentName, localTheme) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return function (ThemedComponent) {
    var _class, _temp;

    var _DEFAULT_OPTIONS$opti = _extends({}, DEFAULT_OPTIONS, options),
        optionComposeTheme = _DEFAULT_OPTIONS$opti.composeTheme,
        optionMapThemrProps = _DEFAULT_OPTIONS$opti.mapThemrProps;

    validateComposeOption(optionComposeTheme);

    var config = ThemedComponent[THEMR_CONFIG];
    if (config && config.componentName === componentName) {
      config.localTheme = themeable(config.localTheme, localTheme);
      return ThemedComponent;
    }

    config = {
      componentName: componentName,
      localTheme: localTheme
    };

    /**
     * @property {{wrappedInstance: *}} refs
     */
    var Themed = (_temp = _class = function (_Component) {
      _inherits(Themed, _Component);

      function Themed() {
        _classCallCheck(this, Themed);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var _this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args)));

        _this.theme_ = _this.calcTheme(_this.props);
        return _this;
      }

      Themed.prototype.getWrappedInstance = function getWrappedInstance() {
        (0, _invariant2.default)(true, 'DEPRECATED: To access the wrapped instance, you have to pass ' + '{ innerRef: fn } and retrieve with a callback ref style.');

        return this.refs.wrappedInstance;
      };

      Themed.prototype.getNamespacedTheme = function getNamespacedTheme(props) {
        var themeNamespace = props.themeNamespace,
            theme = props.theme;

        if (!themeNamespace) return theme;
        if (themeNamespace && !theme) throw new Error('Invalid themeNamespace use in react-css-themr. ' + 'themeNamespace prop should be used only with theme prop.');

        return Object.keys(theme).filter(function (key) {
          return key.startsWith(themeNamespace);
        }).reduce(function (result, key) {
          var _extends2;

          return _extends({}, result, (_extends2 = {}, _extends2[removeNamespace(key, themeNamespace)] = theme[key], _extends2));
        }, {});
      };

      Themed.prototype.getThemeNotComposed = function getThemeNotComposed(props) {
        if (props.theme) return this.getNamespacedTheme(props);
        if (config.localTheme) return config.localTheme;
        return this.getContextTheme();
      };

      Themed.prototype.getContextTheme = function getContextTheme() {
        return this.context.themr ? this.context.themr.theme[config.componentName] : {};
      };

      Themed.prototype.getTheme = function getTheme(props) {
        return props.composeTheme === COMPOSE_SOFTLY ? _extends({}, this.getContextTheme(), config.localTheme, this.getNamespacedTheme(props)) : themeable(themeable(this.getContextTheme(), config.localTheme), this.getNamespacedTheme(props));
      };

      Themed.prototype.calcTheme = function calcTheme(props) {
        var composeTheme = props.composeTheme;

        return composeTheme ? this.getTheme(props) : this.getThemeNotComposed(props);
      };

      Themed.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (nextProps.composeTheme !== this.props.composeTheme || nextProps.theme !== this.props.theme || nextProps.themeNamespace !== this.props.themeNamespace) {
          this.theme_ = this.calcTheme(nextProps);
        }
      };

      Themed.prototype.render = function render() {
        return _react2.default.createElement(ThemedComponent, this.props.mapThemrProps(this.props, this.theme_));
      };

      return Themed;
    }(_react.Component), _class.displayName = 'Themed' + ThemedComponent.name, _class.contextTypes = {
      themr: _propTypes2.default.object
    }, _class.propTypes = _extends({}, ThemedComponent.propTypes, {
      composeTheme: _propTypes2.default.oneOf([COMPOSE_DEEPLY, COMPOSE_SOFTLY, DONT_COMPOSE]),
      innerRef: _propTypes2.default.func,
      theme: _propTypes2.default.object,
      themeNamespace: _propTypes2.default.string,
      mapThemrProps: _propTypes2.default.func
    }), _class.defaultProps = _extends({}, ThemedComponent.defaultProps, {
      composeTheme: optionComposeTheme,
      mapThemrProps: optionMapThemrProps
    }), _temp);


    Themed[THEMR_CONFIG] = config;

    return (0, _hoistNonReactStatics2.default)(Themed, ThemedComponent);
  };
};

/**
 * Merges passed themes by concatenating string keys and processing nested themes
 *
 * @param {...TReactCSSThemrTheme} themes - Themes
 * @returns {TReactCSSThemrTheme} - Resulting theme
 */


function themeable() {
  for (var _len2 = arguments.length, themes = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    themes[_key2] = arguments[_key2];
  }

  return themes.reduce(function (acc, theme) {
    return merge(acc, theme);
  }, {});
}

/**
 * @param {TReactCSSThemrTheme} [original] - Original theme
 * @param {TReactCSSThemrTheme} [mixin] - Mixin theme
 * @returns {TReactCSSThemrTheme} - resulting theme
 */
function merge() {
  var original = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var mixin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  //make a copy to avoid mutations of nested objects
  //also strip all functions injected by isomorphic-style-loader
  var result = Object.keys(original).reduce(function (acc, key) {
    var value = original[key];
    if (typeof value !== 'function') {
      acc[key] = value;
    }
    return acc;
  }, {});

  //traverse mixin keys and merge them to resulting theme
  Object.keys(mixin).forEach(function (key) {
    //there's no need to set any defaults here
    var originalValue = result[key];
    var mixinValue = mixin[key];

    switch (typeof mixinValue === 'undefined' ? 'undefined' : _typeof(mixinValue)) {
      case 'object':
        {
          //possibly nested theme object
          switch (typeof originalValue === 'undefined' ? 'undefined' : _typeof(originalValue)) {
            case 'object':
              {
                //exactly nested theme object - go recursive
                result[key] = merge(originalValue, mixinValue);
                break;
              }

            case 'undefined':
              {
                //original does not contain this nested key - just take it as is
                result[key] = mixinValue;
                break;
              }

            default:
              {
                //can't merge an object with a non-object
                throw new Error('You are merging object ' + key + ' with a non-object ' + originalValue);
              }
          }
          break;
        }

      case 'undefined': //fallthrough - handles accidentally unset values which may come from props
      case 'function':
        {
          //this handles issue when isomorphic-style-loader addes helper functions to css-module
          break; //just skip
        }

      default:
        {
          //plain values
          switch (typeof originalValue === 'undefined' ? 'undefined' : _typeof(originalValue)) {
            case 'object':
              {
                //can't merge a non-object with an object
                throw new Error('You are merging non-object ' + mixinValue + ' with an object ' + key);
              }

            case 'undefined':
              {
                //mixin key is new to original theme - take it as is
                result[key] = mixinValue;
                break;
              }
            case 'function':
              {
                //this handles issue when isomorphic-style-loader addes helper functions to css-module
                break; //just skip
              }

            default:
              {
                //finally we can merge
                result[key] = originalValue.split(' ').concat(mixinValue.split(' ')).filter(function (item, pos, self) {
                  return self.indexOf(item) === pos && item !== '';
                }).join(' ');
                break;
              }
          }
          break;
        }
    }
  });

  return result;
}

/**
 * Validates compose option
 *
 * @param {String|Boolean} composeTheme - Compose them option
 * @throws
 * @returns {undefined}
 */
function validateComposeOption(composeTheme) {
  if ([COMPOSE_DEEPLY, COMPOSE_SOFTLY, DONT_COMPOSE].indexOf(composeTheme) === -1) {
    throw new Error('Invalid composeTheme option for react-css-themr. Valid composition options are ' + COMPOSE_DEEPLY + ', ' + COMPOSE_SOFTLY + ' and ' + DONT_COMPOSE + '. The given option was ' + composeTheme);
  }
}

/**
 * Removes namespace from key
 *
 * @param {String} key - Key
 * @param {String} themeNamespace - Theme namespace
 * @returns {String} - Key
 */
function removeNamespace(key, themeNamespace) {
  var capitalized = key.substr(themeNamespace.length);
  return capitalized.slice(0, 1).toLowerCase() + capitalized.slice(1);
}

/**
 * Maps props and theme to an object that will be used to pass down props to the
 * decorated component.
 *
 * @param {Object} ownProps - All props given to the decorated component
 * @param {Object} theme - Calculated then that should be passed down
 * @returns {Object} - Props that will be passed down to the decorated component
 */
function defaultMapThemrProps(ownProps, theme) {
  var composeTheme = ownProps.composeTheme,
      innerRef = ownProps.innerRef,
      themeNamespace = ownProps.themeNamespace,
      mapThemrProps = ownProps.mapThemrProps,
      rest = _objectWithoutProperties(ownProps, ['composeTheme', 'innerRef', 'themeNamespace', 'mapThemrProps']);

  return _extends({}, rest, {
    ref: innerRef,
    theme: theme
  });
}